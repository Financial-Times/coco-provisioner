#cloud-config

coreos:
  update:
    reboot-strategy: best-effort
  etcd2:
    # generate a new token for each unique cluster from https://discovery.etcd.io/new?size=3
    discovery: {{token}}
    # multi-region and multi-cloud deployments need to use $public_ipv4
    advertise-client-urls: http://$private_ipv4:2379,http://$private_ipv4:4001
    initial-advertise-peer-urls: http://$private_ipv4:2380
    # listen on both the official ports and the legacy ports
    # legacy ports can be omitted if your application doesn't depend on them
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    listen-peer-urls: http://$private_ipv4:2380,http://$private_ipv4:7001
  fleet:
    # allow etcd to slow down at times
    etcd_servers: http://127.0.0.1:2379
    etcd_request_timeout: 3.0
    metadata: host_type=stateless
  units:
    - name: etcd2.service
      command: start
    - name: fleet.service
      command: start
    - name: key-register.service
      command: start
      content: |
          [Unit]
          Description=Add secret keys to etcd2
          After=etcd2.service
          Requires=etcd2.service

          [Service]
          Type=oneshot
          ExecStartPre=/bin/sh -c "while true; do etcdctl cluster-health && break || sleep 2; done"
          ExecStart=/bin/sh -c "etcdctl set /ft/_credentials/wp '{{ wp_contentApi_key }}' > /dev/null;"
          ExecStart=/bin/sh -c "etcdctl set /ft/_credentials/aws/aws_access_key_id '{{ aws_access_key_id }}' > /dev/null;"
          ExecStart=/bin/sh -c "etcdctl set /ft/_credentials/aws/aws_secret_access_key '{{ aws_secret_access_key }}' > /dev/null;"
          ExecStart=/bin/sh -c "etcdctl set /ft/_credentials/elb_name 'coreos-up-{{cp.msg}}' > /dev/null;"
          ExecStart=/bin/sh -c "etcdctl set /ft/_credentials/cms-notifier/post-credentials '{{ cms_notifier_credentials }}' > /dev/null;"
          ExecStart=/bin/sh -c "etcdctl set /ft/_credentials/konstructor/api-key '{{ konstructor_api_key }}' > /dev/null;"
          ExecStart=/bin/sh -c "etcdctl set /ft/config/environment_tag '{{environment_tag}}' > /dev/null;"
          ExecStart=/bin/sh -c "etcdctl set /ft/config/splunk-forwarder/splunk_url 'https://ingest.splunk.glb.ft.com/coco-up/fleet' > /dev/null;"
          ExecStart=/bin/sh -c "etcdctl set /ft/config/service-definition-location '{{service_definition_location}}' > /dev/null;"
          ExecStart=/bin/sh -c "etcdctl set /ft/config/binary-writer/bucket '{{binary_writer_bucket}}' > /dev/null;"
          ExecStart=/bin/sh -c "etcdctl set /ft/config/synthetic-image-publication-monitor-aws/test-uuid '{{aws_image_monitor_test_uuid}}' > /dev/null;"
          ExecStart=/bin/sh -c "etcdctl set /ft/config/synthetic-image-publication-monitor-ucs/test-uuid '{{ucs_image_monitor_test_uuid}}' > /dev/null;"
    - name: authorized_keys.service
      command: start
      content: |
          [Unit]
          Description=Update authorized_keys

          [Service]
          Type=oneshot
          ExecStart=/bin/sh -c "curl -sSL --retry 5 --retry-delay 2 -o /tmp/authorized_keys.sha512 https://raw.githubusercontent.com/Financial-Times/up-ssh-keys/master/authorized_keys.sha512"
          ExecStart=/bin/sh -c "curl -sSL --retry 5 --retry-delay 2 -o /tmp/authorized_keys https://raw.githubusercontent.com/Financial-Times/up-ssh-keys/master/authorized_keys"
          ExecStart=/bin/sh -c "cd /tmp/ && sha512sum -c authorized_keys.sha512 && cp authorized_keys /home/core/.ssh/authorized_keys && chmod 600 /home/core/.ssh/authorized_keys"
    - name: authorized_keys.timer
      command: start
      content: |
          [Unit]
          Description=Authorized keys timer
          
          [Timer]
          OnUnitActiveSec=1min
          
          [Install]
          WantedBy=timers.target
    - name: bootstrap.service
      command: start
      content: |
          [Unit]
          Description=Start fleet services
          After=fleet.service
          Requires=fleet.service

          [Service]
          Type=oneshot
          ExecStartPre=/bin/sh -c "while true; do etcdctl cluster-health && fleetctl list-units && break || sleep 5; done"
          ExecStart=/bin/sh -c "curl -sSL --retry 5 --retry-delay 2 -o /tmp/deployer.service https://raw.githubusercontent.com/Financial-Times/coco-fleet-deployer/master/deployer.service && fleetctl start /tmp/deployer.service"
          ExecStart=/bin/sh -c "curl -sSL --retry 5 --retry-delay 2 -o /tmp/deployer.timer https://raw.githubusercontent.com/Financial-Times/coco-fleet-deployer/master/deployer.timer && fleetctl start /tmp/deployer.timer"
    - name: swapon.service
      command: start
      content: |
          [Unit]
          Description=Create swap

          [Service]
          Type=oneshot
          Environment="SWAPFILE=/swapfile"
          RemainAfterExit=true
          ExecStartPre=/usr/bin/touch ${SWAPFILE}
          ExecStartPre=/usr/bin/fallocate -l 4096m ${SWAPFILE}
          ExecStartPre=/usr/bin/chmod 600 ${SWAPFILE}
          ExecStartPre=/usr/sbin/mkswap ${SWAPFILE}
          ExecStartPre=/usr/sbin/losetup -f ${SWAPFILE}
          ExecStart=/usr/bin/sh -c "/sbin/swapon $(/usr/sbin/losetup -j ${SWAPFILE} | /usr/bin/cut -d : -f 1)"
          ExecStop=/usr/bin/sh -c "/sbin/swapoff $(/usr/sbin/losetup -j ${SWAPFILE} | /usr/bin/cut -d : -f 1)"
          ExecStopPost=/usr/bin/sh -c "/usr/sbin/losetup -d $(/usr/sbin/losetup -j ${SWAPFILE} | /usr/bin/cut -d : -f 1)"

          [Install]
          WantedBy=multi-user.target
write_files:
  - path: /etc/systemd/system/fleet.socket.d/30-ListenStream.conf
    content: |
      [Socket]
      ListenStream=0.0.0.0:49153
  - path: /etc/systemd/system/docker.service.d/mirror.conf
    content: |
      [Service]
      Environment="DOCKER_OPTS=--insecure-registry={{insecure_registry}}"
  - path: /etc/motd.d/env.conf
    content: |
            This enviroment is tagged as {{environment_tag}} and is cluster {{token}}

