#cloud-config

coreos:
  update:
    reboot-strategy: best-effort
  etcd2:
    # generate a new token for each unique cluster from https://discovery.etcd.io/new?size=3
    discovery: {{token}}
    # multi-region and multi-cloud deployments need to use $public_ipv4
    advertise-client-urls: http://$private_ipv4:2379
    initial-advertise-peer-urls: http://$private_ipv4:2380
    # listen on both the official ports and the legacy ports
    # legacy ports can be omitted if your application doesn't depend on them
    listen-client-urls: http://0.0.0.0:2379
    listen-peer-urls: http://$private_ipv4:2380
  fleet:
    # allow etcd to slow down at times
    etcd_servers: http://127.0.0.1:2379
    etcd_request_timeout: 3.0
    metadata: host_type=stateless
  units:
    - name: etcd2.service
      command: start
    - name: fleet.service
      command: start
    - name: key-register.service
      command: start
      content: |
          [Unit]
          Description=Add secret keys to etcd
          After=etcd.service

          [Service]
          Type=oneshot
          ExecStartPre=/bin/sh -c "while true; do etcdctl cluster-health && break || sleep 2; done"
          ExecStart=/bin/sh -c "etcdctl set /ft/_credentials/wp {{ wp_contentApi_key }};" 
          ExecStart=/bin/sh -c "etcdctl set /ft/_credentials/binary-writer/s3-accessKey {{ s3_accessKey }};" 
          ExecStart=/bin/sh -c "etcdctl set /ft/_credentials/binary-writer/s3-secretKey {{ s3_secretKey }};"
          ExecStart=/bin/sh -c "etcdctl set /ft/_credentials/splunk-forwarder/splunk_url {{ splunk_url }};"
          ExecStart=/bin/sh -c "etcdctl set /ft/_credentials/dashing/auth_token {{ dashing_auth_token }};"
          ExecStart=/bin/sh -c "etcdctl set /ft/_credentials/aws/aws_access_key_id {{ aws_access_key_id }};"
          ExecStart=/bin/sh -c "etcdctl set /ft/_credentials/aws/aws_secret_access_key {{ aws_secret_access_key }};"
          ExecStart=/bin/sh -c "etcdctl set /ft/_credentials/elb_name coreos-up-{{cp.msg}};"
    - name: deploy-deployer.service
      command: start
      content: |
          [Unit]
          Description=Deploy the deployer
          After=fleet.service etcd2.service

          [Service]
          ExecStartPre=/bin/sh -c "while true; do etcdctl cluster-health && break || sleep 2; done"
          ExecStart=/bin/sh -c "curl {{deployer_service_file_location}} > deployer.service; fleetctl start deployer.service "
write_files:
  - path: /etc/systemd/system/fleet.socket.d/30-ListenStream.conf
    content: |
      [Socket]
      ListenStream=0.0.0.0:49153
  - path: /etc/systemd/system/docker.service.d/mirror.conf
    content: |
      [Service]
      Environment="DOCKER_OPTS=--insecure-registry={{insecure_registry}}"
{% include 'ssh_authorized_keys.yaml' %}
