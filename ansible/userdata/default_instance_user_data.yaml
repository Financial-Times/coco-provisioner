#cloud-config

coreos:
  update:
    reboot-strategy: best-effort
  etcd:
    discovery: {{token}}
    addr: $private_ipv4:4001
    peer-addr: $private_ipv4:7001
    # give etcd more time if it's under heavy load - prevent leader election thrashing
    peer-election-timeout: 2000
    # heartbeat interval should ideally be 1/4 or 1/5 of peer election timeout
    peer-heartbeat-interval: 500
  fleet:
    # allow etcd to slow down at times
    etcd_request_timeout: 3.0
    metadata: host_type=stateless
  units:
    - name: etcd.service
      command: start
    - name: fleet.service
      command: start
    - name: key-register.service
      command: start
      content: |
          [Unit]
          Description=Add secret keys to etcd
          After=etcd.service

          [Service]
          Type=oneshot
          ExecStartPre=/bin/sh -c "while true; do etcdctl ls / && break || sleep 5; done;"
          ExecStart=/bin/sh -c "etcdctl set /ft/_credentials/wp {{ wp_contentApi_key }} > /dev/null;" 
          ExecStart=/bin/sh -c "etcdctl set /ft/_credentials/binary-writer/s3-accessKey {{ s3_accessKey }} > /dev/null;" 
          ExecStart=/bin/sh -c "etcdctl set /ft/_credentials/binary-writer/s3-secretKey {{ s3_secretKey }} > /dev/null;"
          ExecStart=/bin/sh -c "etcdctl set /ft/_credentials/splunk-forwarder/splunk_url {{ splunk_url }} > /dev/null;"
          ExecStart=/bin/sh -c "etcdctl set /ft/_credentials/dashing/auth_token {{ dashing_auth_token }} > /dev/null;"
          ExecStart=/bin/sh -c "etcdctl set /ft/_credentials/aws/aws_access_key_id {{ aws_access_key_id }} > /dev/null;"
          ExecStart=/bin/sh -c "etcdctl set /ft/_credentials/aws/aws_secret_access_key {{ aws_secret_access_key }} > /dev/null;"
          ExecStart=/bin/sh -c "etcdctl set /ft/_credentials/elb_name coreos-up-{{cp.msg}} > /dev/null;"
          ExecStart=/bin/sh -c "etcdctl set /ft/_credentials/cms-notifier/post-credentials {{ cms_notifier_credentials }} > /dev/null;"
          ExecStart=/bin/sh -c "etcdctl set /ft/config/environment_tag {{environment_tag}} > /dev/null;"
    - name: deploy-deployer.service
      command: start
      content: |
          [Unit]
          Description=Deploy the deployer
          After=fleet.service

          [Service]
          ExecStart=/bin/sh -c "curl {{deployer_service_file_location}} > deployer.service; fleetctl start deployer.service "
write_files:
  - path: /etc/systemd/system/fleet.socket.d/30-ListenStream.conf
    content: |
      [Socket]
      ListenStream=0.0.0.0:49153
  - path: /etc/systemd/system/docker.service.d/mirror.conf
    content: |
      [Service]
      Environment="DOCKER_OPTS=--insecure-registry={{insecure_registry}}"
  - path: /etc/motd.d/env.conf
    content: |
            This enviroment is tagged as {{environment_tag}} and is cluster {{token}}
{% include 'ssh_authorized_keys.yaml' %}
