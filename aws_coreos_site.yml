- hosts: localhost
  connection: local

  vars:
    region: eu-west-1
    ami: ami-5f2f5528
    insecure_registry: up-registry.ft.com
  vars_files:
    - keys.yaml

  tasks:
    - debug: msg="{{ token | regex_replace('^https?:\\/\\/[\\w\\.]*\\/([\\w]{12})[\\w]*$', '\\1') }}"
      register:  cp
    
    - ec2_vpc:
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        region: "{{region}}"
        state: present
        cidr_block: 172.23.0.0/16
        resource_tags: { "Environment":"Production", "Name":"fleet-vpc-{{ cp.msg }}" }
        subnets:
          - cidr: 172.23.1.0/24
            az:  "{{ region }}a"
            resource_tags: { "Environment":"Production", "Name": "fleet-subnet-{{ cp.msg }}"}
        internet_gateway: True
        route_tables:
          - subnets:
              - 172.23.1.0/24
            routes:
              - dest: 0.0.0.0/0
                gw: igw
      register: vpc

    - debug: msg="VPC {{ vpc }}"

    - s3:
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        region: "{{region}}"
        bucket: "coco-docker-registry"
        object: "/registry"
        mode: "create"

    - name: Set up fleet security group
      ec2_group:
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        region: "{{region}}"
        name: "fleet-sg-{{ cp.msg }}"
        description: Fleet secutiy group
        vpc_id: "{{ vpc.vpc_id }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 0
            to_port: 65535
            cidr_ip: 172.23.1.0/24
        rules_egress:
          - proto: tcp
            from_port: 0
            to_port: 65535
            cidr_ip: 0.0.0.0/0
      register: fleet_group

    - name: cluster-elb
      ec2_elb_lb:
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        region: "{{region}}"
        name: "{{cp.msg}}-cluster-elb"
        state: present
        security_group_ids: '{{fleet_group.group_id}}'
        subnets:
          - "{{ vpc.subnets[0].id }}"
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 8080
        purge_listeners: True
        health_check:
          ping_protocol: tcp # options are http, https, ssl, tcp
          ping_port: 8080
          #ping_path: "/index.html" # not required for tcp or ssl
          response_timeout: 5 # seconds
          interval: 30 # seconds
          unhealthy_threshold: 2
          healthy_threshold: 10
      register: cluster_elb

    - debug: msg="cluster_elb dns {{ cluster_elb.elb.dns_name }}"

    - name: Provision m3.medium instances
      ec2:
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        region: "{{region}}"
        group: "fleet-sg-{{ cp.msg }}"
        image: "{{ami}}"
        instance_type: m3.medium
        wait: true
        exact_count: 2
        user_data: "{{ lookup('template', 'userdata/default_instance_user_data.yaml') }}"
        vpc_subnet_id: "{{ vpc.subnets[0].id }}"
        assign_public_ip: yes
        volumes:
          - device_name: /dev/xvda
            volume_size: 30
        count_tag:
          Name: "{{cp.msg}}_fleet_default"
        instance_tags:
          Name: "{{cp.msg}}_fleet_default"
      register: ec2_small

    - debug: msg="ec2_small ips {{ item.public_ip }}"
      with_items: "{{ ec2_small.tagged_instances }}"

    - name: Provision m3.medium persistent instance
      ec2:
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        region: "{{region}}"
        group: "fleet-sg-{{ cp.msg }}"
        image: "{{ami}}"
        instance_type: m3.medium
        wait: true
        exact_count: 1
        user_data: "{{ lookup('template', 'userdata/persistent_instance_user_data_1.yaml') }}"
        vpc_subnet_id: "{{ vpc.subnets[0].id }}"
        assign_public_ip: yes
        volumes:
          - device_name: /dev/xvda
            volume_size: 30
          - device_name: /dev/xvdf
            volume_size: 80
        count_tag:
          Name: "{{cp.msg}}_fleet_persistent_1"
        instance_tags:
          Name: "{{cp.msg}}_fleet_persistent_1"
      register: ec2_persistent

    - debug: msg="ec2_persistent ips {{ item.public_ip }}"
      with_items: "{{ ec2_persistent.tagged_instances }}"

    - name: Provision m3.medium persistent instance
      ec2:
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        region: "{{region}}"
        group: "fleet-sg-{{ cp.msg }}"
        image: "{{ami}}"
        instance_type: m3.medium
        wait: true
        exact_count: 1
        user_data: "{{ lookup('template', 'userdata/persistent_instance_user_data_2.yaml') }}"
        vpc_subnet_id: "{{ vpc.subnets[0].id }}"
        assign_public_ip: yes
        volumes:
          - device_name: /dev/xvda
            volume_size: 30
          - device_name: /dev/xvdf
            volume_size: 80
        count_tag:
          Name: "{{cp.msg}}_fleet_persistent_2"
        instance_tags:
          Name: "{{cp.msg}}_fleet_persistent_2"
      register: ec2_persistent

    - debug: msg="ec2_persistent ips {{ item.public_ip }}"
      with_items: "{{ ec2_persistent.tagged_instances }}"

    - name: Provision m3.medium persistent instance
      ec2:
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        region: "{{region}}"
        group: "fleet-sg-{{ cp.msg }}"
        image: "{{ami}}"
        instance_type: m3.medium
        wait: true
        exact_count: 1
        user_data: "{{ lookup('template', 'userdata/persistent_instance_user_data_3.yaml') }}"
        vpc_subnet_id: "{{ vpc.subnets[0].id }}"
        assign_public_ip: yes
        volumes:
          - device_name: /dev/xvda
            volume_size: 30
          - device_name: /dev/xvdf
            volume_size: 80
        count_tag:
          Name: "{{cp.msg}}_fleet_persistent_3"
        instance_tags:
          Name: "{{cp.msg}}_fleet_persistent_3"
      register: ec2_persistent

    - debug: msg="ec2_persistent ips {{ item.public_ip }}"
      with_items: "{{ ec2_persistent.tagged_instances }}"

